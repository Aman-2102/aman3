//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace new_cab.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CabBookingEntities : DbContext
    {
        public CabBookingEntities()
            : base("name=CabBookingEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<BookingDetail> BookingDetails { get; set; }
        public virtual DbSet<DriverLocation> DriverLocations { get; set; }
        public virtual DbSet<locationoption> locationoptions { get; set; }
        public virtual DbSet<locationTable> locationTables { get; set; }
        public virtual DbSet<logindetail> logindetails { get; set; }
        public virtual DbSet<paymentType> paymentTypes { get; set; }
        public virtual DbSet<UserDetail> UserDetails { get; set; }
        public virtual DbSet<UserDrive> UserDrives { get; set; }
        public virtual DbSet<companyProfit> companyProfits { get; set; }
    
        public virtual int InsertUserdetail(Nullable<int> userid, string userName, string gENDER, Nullable<int> walletamount, Nullable<int> usertype, string phonenumber, string oPType)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var gENDERParameter = gENDER != null ?
                new ObjectParameter("GENDER", gENDER) :
                new ObjectParameter("GENDER", typeof(string));
    
            var walletamountParameter = walletamount.HasValue ?
                new ObjectParameter("walletamount", walletamount) :
                new ObjectParameter("walletamount", typeof(int));
    
            var usertypeParameter = usertype.HasValue ?
                new ObjectParameter("usertype", usertype) :
                new ObjectParameter("usertype", typeof(int));
    
            var phonenumberParameter = phonenumber != null ?
                new ObjectParameter("phonenumber", phonenumber) :
                new ObjectParameter("phonenumber", typeof(string));
    
            var oPTypeParameter = oPType != null ?
                new ObjectParameter("OPType", oPType) :
                new ObjectParameter("OPType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUserdetail", useridParameter, userNameParameter, gENDERParameter, walletamountParameter, usertypeParameter, phonenumberParameter, oPTypeParameter);
        }
    
        public virtual int updateuserdetail(Nullable<int> userId, string userName, string gender, Nullable<int> walletAmount, Nullable<int> usertype, string phoneNumber, string useremail, string userpass)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var walletAmountParameter = walletAmount.HasValue ?
                new ObjectParameter("WalletAmount", walletAmount) :
                new ObjectParameter("WalletAmount", typeof(int));
    
            var usertypeParameter = usertype.HasValue ?
                new ObjectParameter("usertype", usertype) :
                new ObjectParameter("usertype", typeof(int));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("phoneNumber", phoneNumber) :
                new ObjectParameter("phoneNumber", typeof(string));
    
            var useremailParameter = useremail != null ?
                new ObjectParameter("useremail", useremail) :
                new ObjectParameter("useremail", typeof(string));
    
            var userpassParameter = userpass != null ?
                new ObjectParameter("userpass", userpass) :
                new ObjectParameter("userpass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateuserdetail", userIdParameter, userNameParameter, genderParameter, walletAmountParameter, usertypeParameter, phoneNumberParameter, useremailParameter, userpassParameter);
        }
    }
}
